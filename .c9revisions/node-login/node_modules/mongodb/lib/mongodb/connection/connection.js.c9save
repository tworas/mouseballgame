{"ts":1354692316260,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var utils = require('./connection_utils'),\n  inherits = require('util').inherits,\n  net = require('net'),\n  EventEmitter = require('events').EventEmitter,\n  inherits = require('util').inherits,\n  binaryutils = require('../utils'),\n  tls = require('tls');\n\nvar Connection = exports.Connection = function(id, socketOptions) {\n  // Set up event emitter\n  EventEmitter.call(this);\n  // Store all socket options\n  this.socketOptions = socketOptions ? socketOptions : {host:'localhost', port:27017, domainSocket:false};\n  // Set keep alive default if not overriden\n  if(this.socketOptions.keepAlive == null && (process.platform !== \"sunos\" || process.platform !== \"win32\")) this.socketOptions.keepAlive = 100;\n  // Id for the connection\n  this.id = id;\n  // State of the connection\n  this.connected = false;\n  // Set if this is a domain socket\n  this.domainSocket = this.socketOptions.domainSocket;\n\n  //\n  // Connection parsing state\n  //\n  this.maxBsonSize = socketOptions.maxBsonSize ? socketOptions.maxBsonSize : Connection.DEFAULT_MAX_BSON_SIZE;\n  // Contains the current message bytes\n  this.buffer = null;\n  // Contains the current message size\n  this.sizeOfMessage = 0;\n  // Contains the readIndex for the messaage\n  this.bytesRead = 0;\n  // Contains spill over bytes from additional messages\n  this.stubBuffer = 0;\n\n  // Just keeps list of events we allow\n  this.eventHandlers = {error:[], parseError:[], poolReady:[], message:[], close:[], timeout:[], end:[]};\n\n  // Just keeps list of events we allow\n  resetHandlers(this, false);\n}\n\n// Set max bson size\nConnection.DEFAULT_MAX_BSON_SIZE = 1024 * 1024 * 4;\n\n// Inherit event emitter so we can emit stuff wohoo\ninherits(Connection, EventEmitter);\n\nConnection.prototype.start = function() {\n  // If we have a normal connection\n  if(this.socketOptions.ssl) {\n    // Create a new stream\n    this.connection = new net.Socket();\n    // Set timeout allowing backward compatibility to timeout if no connectTimeoutMS is set\n    this.connection.setTimeout(this.socketOptions.connectTimeoutMS != null ? this.socketOptions.connectTimeoutMS : this.socketOptions.timeout);\n    // Work around for 0.4.X\n    if(process.version.indexOf(\"v0.4\") == -1) this.connection.setNoDelay(this.socketOptions.noDelay);\n    // Set keep alive if defined\n    if(process.version.indexOf(\"v0.4\") == -1) {\n      if(this.socketOptions.keepAlive > 0) {\n        this.connection.setKeepAlive(true, this.socketOptions.keepAlive);\n      } else {\n        this.connection.setKeepAlive(false);\n      }\n    }\n\n    // Set up pair for tls with server, accept self-signed certificates as well\n    var pair = this.pair = tls.createSecurePair(false);\n    // Set up encrypted streams\n    this.pair.encrypted.pipe(this.connection);\n    this.connection.pipe(this.pair.encrypted);\n\n    // Setup clearText stream\n    this.writeSteam = this.pair.cleartext;\n    // Add all handlers to the socket to manage it\n    this.pair.on(\"secure\", connectHandler(this));\n    this.pair.cleartext.on(\"data\", createDataHandler(this));\n    // Add handlers\n    this.connection.on(\"error\", errorHandler(this));\n    // this.connection.on(\"connect\", connectHandler(this));\n    this.connection.on(\"end\", endHandler(this));\n    this.connection.on(\"timeout\", timeoutHandler(this));\n    this.connection.on(\"drain\", drainHandler(this));\n    this.writeSteam.on(\"close\", closeHandler(this));\n    // Start socket\n    this.connection.connect(this.socketOptions.port, this.socketOptions.host);\n    if(this.logger != null && this.logger.doDebug){\n      this.logger.debug(\"opened connection\", this.socketOptions);\n    }\n  } else {\n    // Create new connection instance\n    if(!this.domainSocket) {\n      this.connection = net.createConnection(this.socketOptions.port, this.socketOptions.host);      \n    } else {\n      this.connection = net.createConnection(this.socketOptions.host);            \n    }\n    if(this.logger != null && this.logger.doDebug){\n      this.logger.debug(\"opened connection\", this.socketOptions);\n    }\n    // Set options on the socket\n    this.connection.setTimeout(this.socketOptions.connectTimeoutMS != null ? this.socketOptions.connectTimeoutMS : this.socketOptions.timeout);\n    // Work around for 0.4.X\n    if(process.version.indexOf(\"v0.4\") == -1) this.connection.setNoDelay(this.socketOptions.noDelay);\n    // Set keep alive if defined\n    if(process.version.indexOf(\"v0.4\") == -1) {\n      if(this.socketOptions.keepAlive > 0) {\n        this.connection.setKeepAlive(true, this.socketOptions.keepAlive);\n      } else {\n        this.connection.setKeepAlive(false);\n      }\n    }\n\n    // Set up write stream\n    this.writeSteam = this.connection;\n    // Add handlers\n    this.connection.on(\"error\", errorHandler(this));\n    // Add all handlers to the socket to manage it\n    this.connection.on(\"connect\", connectHandler(this));\n    // this.connection.on(\"end\", endHandler(this));\n    this.connection.on(\"data\", createDataHandler(this));\n    this.connection.on(\"timeout\", timeoutHandler(this));\n    this.connection.on(\"drain\", drainHandler(this));\n    this.connection.on(\"close\", closeHandler(this));\n  }\n}\n\n// Check if the sockets are live\nConnection.prototype.isConnected = function() {\n  return this.connected && !this.connection.destroyed && this.connection.writable && this.connection.readable;\n}\n\n// Write the data out to the socket\nConnection.prototype.write = function(command, callback) {\n  try {\n    // If we have a list off commands to be executed on the same socket\n    if(Array.isArray(command)) {\n      for(var i = 0; i < command.length; i++) {\n        var binaryCommand = command[i].toBinary()\n        if(!this.socketOptions['disableDriverBSONSizeCheck'] && binaryCommand.length > this.maxBsonSize) \n          return callback(new Error(\"Document exceeds maximal allowed bson size of \" + this.maxBsonSize + \" bytes\"));\n        if(this.logger != null && this.logger.doDebug) \n          this.logger.debug(\"writing command to mongodb\", {binary: binaryCommand, json: command[i]});\n        \n        var r = this.writeSteam.write(binaryCommand);\n      }\n    } else {\n      var binaryCommand = command.toBinary()\n      if(!this.socketOptions['disableDriverBSONSizeCheck'] && binaryCommand.length > this.maxBsonSize) \n        return callback(new Error(\"Document exceeds maximal allowed bson size of \" + this.maxBsonSize + \" bytes\"));\n      \n      if(this.logger != null && this.logger.doDebug) \n        this.logger.debug(\"writing command to mongodb\", {binary: binaryCommand, json: command});\n\n      var r = this.writeSteam.write(binaryCommand);\n    }\n  } catch (err) {\n    if(typeof callback === 'function') callback(err);\n  }\n}\n\n// Force the closure of the connection\nConnection.prototype.close = function() {\n  // clear out all the listeners\n  resetHandlers(this, true);\n  // Add a dummy error listener to catch any weird last moment errors (and ignore them)\n  this.connection.on(\"error\", function() {})\n  // destroy connection\n  this.connection.destroy();\n  if(this.logger != null && this.logger.doDebug){\n    this.logger.debug(\"closed connection\", this.connection);\n  }\n}\n\n// Reset all handlers\nvar resetHandlers = function(self, clearListeners) {\n  self.eventHandlers = {error:[], connect:[], close:[], end:[], timeout:[], parseError:[], message:[]};\n\n  // If we want to clear all the listeners\n  if(clearListeners && self.connection != null) {\n    var keys = Object.keys(self.eventHandlers);\n    // Remove all listeners\n    for(var i = 0; i < keys.length; i++) {\n      self.connection.removeAllListeners(keys[i]);\n    }\n  }\n}\n\n//\n// Handlers\n//\n\n// Connect handler\nvar connectHandler = function(self) {\n  return function() {\n    // Set connected\n    self.connected = true;\n    // Now that we are connected set the socket timeout\n    self.connection.setTimeout(self.socketOptions.socketTimeoutMS != null ? self.socketOptions.socketTimeoutMS : self.socketOptions.timeout);\n    // Emit the connect event with no error\n    self.emit(\"connect\", null, self);\n  }\n}\n\nvar createDataHandler = exports.Connection.createDataHandler = function(self) {\n  // We need to handle the parsing of the data\n  // and emit the messages when there is a complete one\n  return function(data) {\n    // Parse until we are done with the data\n    while(data.length > 0) {\n      // If we still have bytes to read on the current message\n      if(self.bytesRead > 0 && self.sizeOfMessage > 0) {\n        // Calculate the amount of remaining bytes\n        var remainingBytesToRead = self.sizeOfMessage - self.bytesRead;\n        // Check if the current chunk contains the rest of the message\n        if(remainingBytesToRead > data.length) {\n          // Copy the new data into the exiting buffer (should have been allocated when we know the message size)\n          data.copy(self.buffer, self.bytesRead);\n          // Adjust the number of bytes read so it point to the correct index in the buffer\n          self.bytesRead = self.bytesRead + data.length;\n\n          // Reset state of buffer\n          data = new Buffer(0);\n        } else {\n          // Copy the missing part of the data into our current buffer\n          data.copy(self.buffer, self.bytesRead, 0, remainingBytesToRead);\n          // Slice the overflow into a new buffer that we will then re-parse\n          data = data.slice(remainingBytesToRead);\n\n          // Emit current complete message\n          try {\n            var emitBuffer = self.buffer;\n            // Reset state of buffer\n            self.buffer = null;\n            self.sizeOfMessage = 0;\n            self.bytesRead = 0;\n            self.stubBuffer = null;\n            // Emit the buffer\n            self.emit(\"message\", emitBuffer, self);\n          } catch(err) {\n            var errorObject = {err:\"socketHandler\", trace:err, bin:buffer, parseState:{\n              sizeOfMessage:self.sizeOfMessage,\n              bytesRead:self.bytesRead,\n              stubBuffer:self.stubBuffer}};\n            if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n            // We got a parse Error fire it off then keep going\n            self.emit(\"parseError\", errorObject, self);\n          }\n        }\n      } else {\n        // Stub buffer is kept in case we don't get enough bytes to determine the\n        // size of the message (< 4 bytes)\n        if(self.stubBuffer != null && self.stubBuffer.length > 0) {\n\n          // If we have enough bytes to determine the message size let's do it\n          if(self.stubBuffer.length + data.length > 4) {\n            // Prepad the data\n            var newData = new Buffer(self.stubBuffer.length + data.length);\n            self.stubBuffer.copy(newData, 0);\n            data.copy(newData, self.stubBuffer.length);\n            // Reassign for parsing\n            data = newData;\n\n            // Reset state of buffer\n            self.buffer = null;\n            self.sizeOfMessage = 0;\n            self.bytesRead = 0;\n            self.stubBuffer = null;\n\n          } else {\n\n            // Add the the bytes to the stub buffer\n            var newStubBuffer = new Buffer(self.stubBuffer.length + data.length);\n            // Copy existing stub buffer\n            self.stubBuffer.copy(newStubBuffer, 0);\n            // Copy missing part of the data\n            data.copy(newStubBuffer, self.stubBuffer.length);\n            // Exit parsing loop\n            data = new Buffer(0);\n          }\n        } else {\n          if(data.length > 4) {\n            // Retrieve the message size\n            var sizeOfMessage = binaryutils.decodeUInt32(data, 0);\n            // If we have a negative sizeOfMessage emit error and return\n            if(sizeOfMessage < 0 || sizeOfMessage > self.maxBsonSize) {\n              var errorObject = {err:\"socketHandler\", trace:'', bin:self.buffer, parseState:{\n                sizeOfMessage: sizeOfMessage,\n                bytesRead: self.bytesRead,\n                stubBuffer: self.stubBuffer}};\n              if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n              // We got a parse Error fire it off then keep going\n              self.emit(\"parseError\", errorObject, self);\n              return;\n            }\n\n            // Ensure that the size of message is larger than 0 and less than the max allowed\n            if(sizeOfMessage > 4 && sizeOfMessage < self.maxBsonSize && sizeOfMessage > data.length) {\n              self.buffer = new Buffer(sizeOfMessage);\n              // Copy all the data into the buffer\n              data.copy(self.buffer, 0);\n              // Update bytes read\n              self.bytesRead = data.length;\n              // Update sizeOfMessage\n              self.sizeOfMessage = sizeOfMessage;\n              // Ensure stub buffer is null\n              self.stubBuffer = null;\n              // Exit parsing loop\n              data = new Buffer(0);\n\n            } else if(sizeOfMessage > 4 && sizeOfMessage < self.maxBsonSize && sizeOfMessage == data.length) {\n              try {\n                var emitBuffer = data;\n                // Reset state of buffer\n                self.buffer = null;\n                self.sizeOfMessage = 0;\n                self.bytesRead = 0;\n                self.stubBuffer = null;\n                // Exit parsing loop\n                data = new Buffer(0);\n                // Emit the message\n                self.emit(\"message\", emitBuffer, self);\n              } catch (err) {\n                var errorObject = {err:\"socketHandler\", trace:err, bin:self.buffer, parseState:{\n                  sizeOfMessage:self.sizeOfMessage,\n                  bytesRead:self.bytesRead,\n                  stubBuffer:self.stubBuffer}};\n                if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n                // We got a parse Error fire it off then keep going\n                self.emit(\"parseError\", errorObject, self);\n              }\n            } else if(sizeOfMessage <= 4 || sizeOfMessage > self.maxBsonSize) {\n              var errorObject = {err:\"socketHandler\", trace:null, bin:data, parseState:{\n                sizeOfMessage:sizeOfMessage,\n                bytesRead:0,\n                buffer:null,\n                stubBuffer:null}};\n              if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n              // We got a parse Error fire it off then keep going\n              self.emit(\"parseError\", errorObject, self);\n\n              // Clear out the state of the parser\n              self.buffer = null;\n              self.sizeOfMessage = 0;\n              self.bytesRead = 0;\n              self.stubBuffer = null;\n              // Exit parsing loop\n              data = new Buffer(0);\n\n            } else {\n              try {\n                var emitBuffer = data.slice(0, sizeOfMessage);\n                // Reset state of buffer\n                self.buffer = null;\n                self.sizeOfMessage = 0;\n                self.bytesRead = 0;\n                self.stubBuffer = null;\n                // Copy rest of message\n                data = data.slice(sizeOfMessage);\n                // Emit the message\n                self.emit(\"message\", emitBuffer, self);\n              } catch (err) {\n                var errorObject = {err:\"socketHandler\", trace:err, bin:self.buffer, parseState:{\n                  sizeOfMessage:sizeOfMessage,\n                  bytesRead:self.bytesRead,\n                  stubBuffer:self.stubBuffer}};\n                if(self.logger != null && self.logger.doError) self.logger.error(\"parseError\", errorObject);\n                // We got a parse Error fire it off then keep going\n                self.emit(\"parseError\", errorObject, self);\n              }\n\n            }\n          } else {\n            // Create a buffer that contains the space for the non-complete message\n            self.stubBuffer = new Buffer(data.length)\n            // Copy the data to the stub buffer\n            data.copy(self.stubBuffer, 0);\n            // Exit parsing loop\n            data = new Buffer(0);\n          }\n        }\n      }\n    }\n  }\n}\n\nvar endHandler = function(self) {\n  return function() {\n    // Set connected to false\n    self.connected = false;\n    // Emit end event\n    self.emit(\"end\", {err: 'connection received Fin packet from [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);\n  }\n}\n\nvar timeoutHandler = function(self) {\n  return function() {\n    self.emit(\"timeout\", {err: 'connection to [' + self.socketOptions.host + ':' + self.socketOptions.port + '] timed out'}, self);\n  }\n}\n\nvar drainHandler = function(self) {\n  return function() {\n  }\n}\n\nvar errorHandler = function(self) {\n  return function(err) {\n    // Set connected to false\n    self.connected = false;\n    // Emit error\n    self.emit(\"error\", {err: 'failed to connect to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);\n  }\n}\n\nvar closeHandler = function(self) {\n  return function(hadError) {\n    // If we have an error during the connection phase\n    if(hadError && !self.connected) {\n      // Set disconnected\n      self.connected = false;\n      // Emit error\n      self.emit(\"error\", {err: 'failed to connect to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);\n    } else {\n      // Set disconnected\n      self.connected = false;\n      // Emit close\n      self.emit(\"close\", {err: 'connection closed to [' + self.socketOptions.host + ':' + self.socketOptions.port + ']'}, self);\n    }\n  }\n}\n\n// Some basic defaults\nConnection.DEFAULT_PORT = 27017;\n\n\n\n\n\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":17531}]],"length":17531}
