{"ts":1354673479417,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nvar CT = require('./modules/country-list');\nvar AM = require('./modules/account-manager');\nvar EM = require('./modules/email-dispatcher');\n\nmodule.exports = function(app) {\n\n// main login page //\n\n\tapp.get('/', function(req, res){\n\t// check if the user's credentials are saved in a cookie //\n\t\tif (req.cookies.user == undefined || req.cookies.pass == undefined){\n\t\t\tres.render('login', { locals: { title: 'Hello - Please Login To Your Account' }});\n\t\t}\telse{\n\t// attempt automatic login //\n\t\t\tAM.autoLogin(req.cookies.user, req.cookies.pass, function(o){\n\t\t\t\tif (o != null){\n\t\t\t\t    req.session.user = o;\n\t\t\t\t\tres.redirect('/home');\n\t\t\t\t}\telse{\n\t\t\t\t\tres.render('login', { locals: { title: 'Hello - Please Login To Your Account' }});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\t\n\tapp.post('/', function(req, res){\n\t\tAM.manualLogin(req.param('user'), req.param('pass'), function(e, o){\n\t\t\tif (!o){\n\t\t\t\tres.send(e, 400);\n\t\t\t}\telse{\n\t\t\t    req.session.user = o;\n\t\t\t\tif (req.param('remember-me') == 'true'){\n\t\t\t\t\tres.cookie('user', o.user, { maxAge: 900000 });\n\t\t\t\t\tres.cookie('pass', o.pass, { maxAge: 900000 });\n\t\t\t\t}\n\t\t\t\tres.send(o, 200);\n\t\t\t}\n\t\t});\n\t});\n\t\n// logged-in user homepage //\n\t\n\tapp.get('/home', function(req, res) {\n\t    if (req.session.user == null){\n\t// if user is not logged-in redirect back to login page //\n\t        res.redirect('/');\n\t    }   else{\n\t\t\tres.render('home', {\n\t\t\t\tlocals: {\n\t\t\t\t\ttitle : 'Control Panel',\n\t\t\t\t\tcountries : CT,\n\t\t\t\t\tudata : req.session.user\n\t\t\t\t}\n\t\t\t});\n\t    }\n\t});\n\t\n\tapp.post('/home', function(req, res){\n\t\tif (req.param('user') != undefined) {\n\t\t\tAM.update({\n\t\t\t\tuser \t\t: req.param('user'),\n\t\t\t\tname \t\t: req.param('name'),\n\t\t\t\temail \t\t: req.param('email'),\n\t\t\t\tcountry \t: req.param('country'),\n\t\t\t\tpass\t\t: req.param('pass')\n\t\t\t}, function(o){\n\t\t\t\tif (o){\n\t\t\t\t\treq.session.user = o;\n\t\t\t// udpate the user's login cookies if they exists //\n\t\t\t\t\tif (req.cookies.user != undefined && req.cookies.pass != undefined){\n\t\t\t\t\t\tres.cookie('user', o.user, { maxAge: 900000 });\n\t\t\t\t\t\tres.cookie('pass', o.pass, { maxAge: 900000 });\t\n\t\t\t\t\t}\n\t\t\t\t\tres.send('ok', 200);\n\t\t\t\t}\telse{\n\t\t\t\t\tres.send('error-updating-account', 400);\n\t\t\t\t}\n\t\t\t});\n\t\t}\telse if (req.param('logout') == 'true'){\n\t\t\tres.clearCookie('user');\n\t\t\tres.clearCookie('pass');\n\t\t\treq.session.destroy(function(e){ res.send('ok', 200); });\n\t\t}\n\t});\n\t\n// creating new accounts //\n\t\n\tapp.get('/signup', function(req, res) {\n\t\tres.render('signup', {  locals: { title: 'Signup', countries : CT } });\n\t});\n\t\n\tapp.post('/signup', function(req, res){\n\t\tAM.signup({\n\t\t\tname \t: req.param('name'),\n\t\t\temail \t: req.param('email'),\n\t\t\tuser \t: req.param('user'),\n\t\t\tpass\t: req.param('pass'),\n\t\t\tcountry : req.param('country')\n\t\t}, function(e, o){\n\t\t\tif (e){\n\t\t\t\tres.send(e, 400);\n\t\t\t}\telse{\n\t\t\t\tres.send('ok', 200);\n\t\t\t}\n\t\t});\n\t});\n\n// password reset //\n\n\tapp.post('/lost-password', function(req, res){\n\t// look up the user's account via their email //\n\t\tAM.getEmail(req.param('email'), function(o){\n\t\t\tif (o){\n\t\t\t\tres.send('ok', 200);\n\t\t\t\tEM.dispatchResetPasswordLink(o, function(e, m){\n\t\t\t\t// this callback takes a moment to return //\n\t\t\t\t// should add an ajax loader to give user feedback //\n\t\t\t\t\tif (!e) {\n\t\t\t\t\t//\tres.send('ok', 200);\n\t\t\t\t\t}\telse{\n\t\t\t\t\t\tres.send('email-server-error', 400);\n\t\t\t\t\t\tfor (k in e) console.log('error : ', k, e[k]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\telse{\n\t\t\t\tres.send('email-not-found', 400);\n\t\t\t}\n\t\t});\n\t});\n\n\tapp.get('/reset-password', function(req, res) {\n\t\tvar email = req.query[\"e\"];\n\t\tvar passH = req.query[\"p\"];\n\t\tAM.validateLink(email, passH, function(e){\n\t\t\tif (e != 'ok'){\n\t\t\t\tres.redirect('/');\n\t\t\t} else{\n\t// save the user's email in a session instead of sending to the client //\n\t\t\t\treq.session.reset = { email:email, passHash:passH };\n\t\t\t\tres.render('reset', { title : 'Reset Password' });\n\t\t\t}\n\t\t})\n\t});\n\t\n\tapp.post('/reset-password', function(req, res) {\n\t\tvar nPass = req.param('pass');\n\t// retrieve the user's email from the session to lookup their account and reset password //\n\t\tvar email = req.session.reset.email;\n\t// destory the session immediately after retrieving the stored email //\n\t\treq.session.destroy();\n\t\tAM.setPassword(email, nPass, function(o){\n\t\t\tif (o){\n\t\t\t\tres.send('ok', 200);\n\t\t\t}\telse{\n\t\t\t\tres.send('unable to update password', 400);\n\t\t\t}\n\t\t})\n\t});\n\t\n// view & delete accounts //\n\t\n\tapp.get('/print', function(req, res) {\n\t\tAM.getAllRecords( function(e, accounts){\n\t\t\tres.render('print', { locals: { title : 'Account List', accts : accounts } });\n\t\t})\n\t});\n\t\n\tapp.post('/delete', function(req, res){\n\t\tAM.delete(req.body.id, function(e, obj){\n\t\t\tif (!e){\n\t\t\t\tres.clearCookie('user');\n\t\t\t\tres.clearCookie('pass');\n\t            req.session.destroy(function(e){ res.send('ok', 200); });\n\t\t\t}\telse{\n\t\t\t\tres.send('record not found', 400);\n\t\t\t}\n\t    });\n\t});\n\t\n\tapp.get('/reset', function(req, res) {\n\t\tAM.delAllRecords( );\n\t\tres.redirect('/print');\n\t});\n\t\n\tapp.get('*', function(req, res) { res.render('404', { title: 'Page Not Found'}); });\n\n};"]],"start1":0,"start2":0,"length1":0,"length2":4958}]],"length":4958}
{"contributors":[],"silentsave":false,"ts":1354689817267,"patch":[[{"diffs":[[0,"\n// "],[-1,"main login pag"],[1,"strona główna logowani"],[0,"e //"]],"start1":174,"start2":174,"length1":22,"length2":30}]],"length":4966,"saved":false}
{"ts":1354689840979,"patch":[[{"diffs":[[0,"s){\n"],[-1,"\t// check if the user's credentials are saved in a cookie //\n"],[0,"\t\tif"]],"start1":236,"start2":236,"length1":69,"length2":8},{"diffs":[[0,"e: '"],[-1,"Hello - Please Login To Your Accou"],[1,"Witam - proszę zalogować się na swoje ko"],[0,"nt"],[1,"o"],[0,"' }}"]],"start1":350,"start2":350,"length1":44,"length2":51}]],"length":4912,"saved":false}
{"ts":1354689861110,"patch":[[{"diffs":[[0,"se{\n"],[-1,"\t// attempt automatic login //\n"],[0,"\t\t\tA"]],"start1":410,"start2":410,"length1":39,"length2":8},{"diffs":[[0,"e: '"],[-1,"Hello - Please Login To Your Accou"],[1,"Witam - proszę zalogować się na swoje ko"],[0,"nt"],[1,"o"],[0,"' }}"]],"start1":610,"start2":610,"length1":44,"length2":51}]],"length":4888,"saved":false}
{"ts":1354689883206,"patch":[[{"diffs":[[0,"\n// "],[1,"Za"],[0,"log"],[-1,"ged-in user homepage"],[1,"owany uzytkownik strona glowna"],[0," //\n"]],"start1":1064,"start2":1064,"length1":31,"length2":43}]],"length":4900,"saved":false}
{"ts":1354689902542,"patch":[[{"diffs":[[0,"l){\n"],[-1,"\t// if user is not logged-in redirect back to login page //\n"],[0,"\t   "]],"start1":1180,"start2":1180,"length1":68,"length2":8},{"diffs":[[0," : '"],[-1,"Control Panel"],[1,"Panel kontrolny"],[0,"',\n\t"]],"start1":1275,"start2":1275,"length1":21,"length2":23}]],"length":4842,"saved":false}
{"ts":1354689935800,"patch":[[{"diffs":[[0," o;\n"],[-1,"\t\t\t// udpate the user's login cookies if they exists //\n"],[0,"\t\t\t\t"]],"start1":1688,"start2":1688,"length1":64,"length2":8},{"diffs":[[0,"\n// "],[-1,"creating new accou"],[1,"tworzenie nowych ko"],[0,"nt"],[-1,"s"],[0," //\n"]],"start1":2151,"start2":2151,"length1":29,"length2":29}]],"length":4786,"saved":false}
{"ts":1354689959391,"patch":[[{"diffs":[[0,"e: '"],[-1,"Signup"],[1,"Zarejestruj się"],[0,"', c"]],"start1":2263,"start2":2263,"length1":14,"length2":23}]],"length":4795,"saved":false}
{"ts":1354689968862,"patch":[[{"diffs":[[0,"\n// "],[-1,"password reset"],[1,"reset hasla"],[0," //\n"]],"start1":2629,"start2":2629,"length1":22,"length2":19}]],"length":4792,"saved":false}
{"ts":1354689995518,"patch":[[{"diffs":[[0,"s){\n"],[-1,"\t// look up the user's account via their email //\n"],[0,"\t\tAM"]],"start1":2693,"start2":2693,"length1":58,"length2":8},{"diffs":[[0,"m){\n"],[-1,"\t\t\t\t// this callback takes a moment to return //\n\t\t\t\t// should add an ajax loader to give user feedback //\n"],[0,"\t\t\t\t"]],"start1":2828,"start2":2828,"length1":115,"length2":8}]],"length":4635,"saved":false}
{"ts":1354690062697,"patch":[[{"diffs":[[0,"se{\n"],[-1,"\t// save the user's email in a session instead of sending to the client //\n"],[0,"\t\t\t\t"]],"start1":3269,"start2":3269,"length1":83,"length2":8},{"diffs":[[0,"eset"],[-1," Password"],[1,"owanie hasla"],[0,"' })"]],"start1":3366,"start2":3366,"length1":17,"length2":20},{"diffs":[[0,");\n\t"],[-1,"// retrieve the user's email from the session to lookup their account and reset password //\n\t\tvar email = req.session.reset.email;\n\t// destory the session immediately after retrieving the stored email //"],[1,"\tvar email = req.session.reset.email;"],[0,"\n\t\tr"]],"start1":3485,"start2":3485,"length1":211,"length2":45},{"diffs":[[0,"\n// "],[-1,"view & delete accounts "],[1,"zobacz i usuwanie konta"],[0,"//\n\t"]],"start1":3707,"start2":3707,"length1":31,"length2":31}]],"length":4397,"saved":false}
{"ts":1354690069262,"patch":[[{"diffs":[[0,"\n// "],[-1,"zobacz"],[1,"pokazanie"],[0," i u"]],"start1":3707,"start2":3707,"length1":14,"length2":17}]],"length":4400,"saved":false}
{"ts":1354690081707,"patch":[[{"diffs":[[0," : '"],[-1,"Account Lis"],[1,"Lista kon"],[0,"t', "]],"start1":3865,"start2":3865,"length1":19,"length2":17}]],"length":4398,"saved":false}
{"ts":1354690104755,"patch":[[{"diffs":[[0,"e: '"],[-1,"Page Not Found"],[1,"Strona nie znaleziona"],[0,"'});"]],"start1":4368,"start2":4368,"length1":22,"length2":29}]],"length":4405,"saved":false}
