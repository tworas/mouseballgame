{"ts":1354673351562,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\nvar bcrypt = require('bcrypt')\nvar Db = require('mongodb').Db;\nvar Server = require('mongodb').Server;\n\nvar dbPort = 27017;\nvar dbHost = global.host;\nvar dbName = 'login-testing';\n\n// use moment.js for pretty date-stamping //\nvar moment = require('moment');\n\nvar AM = {}; \n\tAM.db = new Db(dbName, new Server(dbHost, dbPort, {auto_reconnect: true}, {}));\n\tAM.db.open(function(e, d){\n\t\tif (e) {\n\t\t\tconsole.log(e);\n\t\t}\telse{\n\t\t\tconsole.log('connected to database :: ' + dbName);\n\t\t}\n\t});\n\tAM.accounts = AM.db.collection('accounts');\n\nmodule.exports = AM;\n\n// logging in //\n\nAM.autoLogin = function(user, pass, callback)\n{\n\tAM.accounts.findOne({user:user}, function(e, o) {\n\t\tif (o){\n\t\t\to.pass == pass ? callback(o) : callback(null);\n\t\t}\telse{\n\t\t\tcallback(null);\n\t\t}\n\t});\n}\n\nAM.manualLogin = function(user, pass, callback)\n{\n\tAM.accounts.findOne({user:user}, function(e, o) {\n\t\tif (o == null){\n\t\t\tcallback('user-not-found');\n\t\t}\telse{\n\t\t\tbcrypt.compare(pass, o.pass, function(err, res) {\n\t\t\t\tif (res){\n\t\t\t\t\tcallback(null, o);\n\t\t\t\t}\telse{\n\t\t\t\t\tcallback('invalid-password');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\n// record insertion, update & deletion methods //\n\nAM.signup = function(newData, callback)\n{\n\tAM.accounts.findOne({user:newData.user}, function(e, o) {\n\t\tif (o){\n\t\t\tcallback('username-taken');\n\t\t}\telse{\n\t\t\tAM.accounts.findOne({email:newData.email}, function(e, o) {\n\t\t\t\tif (o){\n\t\t\t\t\tcallback('email-taken');\n\t\t\t\t}\telse{\n\t\t\t\t\tAM.saltAndHash(newData.pass, function(hash){\n\t\t\t\t\t\tnewData.pass = hash;\n\t\t\t\t\t// append date stamp when record was created //\n\t\t\t\t\t\tnewData.date = moment().format('MMMM Do YYYY, h:mm:ss a');\n\t\t\t\t\t\tAM.accounts.insert(newData, callback(null));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\nAM.update = function(newData, callback)\n{\n\tAM.accounts.findOne({user:newData.user}, function(e, o){\n\t\to.name \t\t= newData.name;\n\t\to.email \t= newData.email;\n\t\to.country \t= newData.country;\n\t\tif (newData.pass == ''){\n\t\t\tAM.accounts.save(o); callback(o);\n\t\t}\telse{\n\t\t\tAM.saltAndHash(newData.pass, function(hash){\n\t\t\t\to.pass = hash;\n\t\t\t\tAM.accounts.save(o); callback(o);\n\t\t\t});\n\t\t}\n\t});\n}\n\nAM.setPassword = function(email, newPass, callback)\n{\n\tAM.accounts.findOne({email:email}, function(e, o){\n\t\tAM.saltAndHash(newPass, function(hash){\n\t\t\to.pass = hash;\n\t\t\tAM.accounts.save(o); callback(o);\n\t\t});\n\t});\n}\n\nAM.validateLink = function(email, passHash, callback)\n{\n\tAM.accounts.find({ $and: [{email:email, pass:passHash}] }, function(e, o){\n\t\tcallback(o ? 'ok' : null);\n\t});\n}\n\nAM.saltAndHash = function(pass, callback)\n{\n\tbcrypt.genSalt(10, function(err, salt) {\n\t\tbcrypt.hash(pass, salt, function(err, hash) {\n\t\t\tcallback(hash);\n\t\t});\n\t});\n}\n\nAM.delete = function(id, callback)\n{\n\tAM.accounts.remove({_id: this.getObjectId(id)}, callback);\n}\n\n// auxiliary methods //\n\nAM.getEmail = function(email, callback)\n{\n\tAM.accounts.findOne({email:email}, function(e, o){ callback(o); });\n}\n\nAM.getObjectId = function(id)\n{\n\treturn AM.accounts.db.bson_serializer.ObjectID.createFromHexString(id)\n}\n\nAM.getAllRecords = function(callback)\n{\n\tAM.accounts.find().toArray(\n\t\tfunction(e, res) {\n\t\tif (e) callback(e)\n\t\telse callback(null, res)\n\t});\n};\n\nAM.delAllRecords = function(id, callback)\n{\n\tAM.accounts.remove(); // reset accounts collection for testing //\n}\n\n// just for testing - these are not actually being used //\n\nAM.findById = function(id, callback)\n{\n\tAM.accounts.findOne({_id: this.getObjectId(id)},\n\t\tfunction(e, res) {\n\t\tif (e) callback(e)\n\t\telse callback(null, res)\n\t});\n};\n\n\nAM.findByMultipleFields = function(a, callback)\n{\n// this takes an array of name/val pairs to search against {fieldName : 'value'} //\n\tAM.accounts.find( { $or : a } ).toArray(\n\t\tfunction(e, results) {\n\t\tif (e) callback(e)\n\t\telse callback(null, results)\n\t});\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":3728}]],"length":3728}
{"contributors":[],"silentsave":false,"ts":1354674187941,"patch":[[{"diffs":[[0,"ct: true"],[1,", safe: false"],[0,"}, {}));"]],"start1":338,"start2":338,"length1":16,"length2":29}]],"length":3741,"saved":false}
{"ts":1354674217863,"patch":[[{"diffs":[[0,"true"],[-1,", safe: false"],[0,"}, {"]],"start1":342,"start2":342,"length1":21,"length2":8}]],"length":3728,"saved":false}
{"contributors":[],"silentsave":false,"ts":1354679493120,"patch":[[{"diffs":[[0,"t = "],[1,"23027; //"],[0,"27017"],[-1,";"],[0,"\nvar"]],"start1":114,"start2":114,"length1":14,"length2":22}]],"length":3736,"saved":false}
{"ts":1354679741429,"patch":[[{"diffs":[[0," = 2"],[-1,"302"],[1,"70172701"],[0,"7; /"]],"start1":115,"start2":115,"length1":11,"length2":16}]],"length":3741,"saved":false}
{"ts":1354679757924,"patch":[[{"diffs":[[0,"bPort = "],[-1,"27017"],[0,"27017; /"]],"start1":110,"start2":110,"length1":21,"length2":16}]],"length":3736,"saved":false}
{"ts":1354684066463,"patch":[[{"diffs":[[0,"erver;\n\n"],[1,"var portDB = process.env.PORT;\n\n"],[0,"var dbPo"]],"start1":97,"start2":97,"length1":16,"length2":48},{"diffs":[[0,"bPort = "],[-1,"27017"],[1,"portDB"],[0,"; //2701"]],"start1":142,"start2":142,"length1":21,"length2":22}]],"length":3769,"saved":false}
{"ts":1354684210737,"patch":[[{"diffs":[[0,"r;\n\n"],[-1,"var portDB = process.env.PORT;\n\n"],[0,"var "]],"start1":101,"start2":101,"length1":40,"length2":8},{"diffs":[[0,"t = "],[-1,"portDB"],[1,"27017"],[0,"; //"]],"start1":114,"start2":114,"length1":14,"length2":13}]],"length":3736,"saved":false}
{"ts":1354684321032,"patch":[[{"diffs":[[0,"true}, {"],[1,"safe:false"],[0,"}));\n\tAM"]],"start1":350,"start2":350,"length1":16,"length2":26}]],"length":3746,"saved":false}
{"ts":1354684345418,"patch":[[{"diffs":[[0,"ort,"],[-1," {auto_reconnect: true}, "],[0,"{saf"]],"start1":328,"start2":328,"length1":33,"length2":8},{"diffs":[[0,":false})"],[1," "],[0,");\n\tAM.d"]],"start1":337,"start2":337,"length1":16,"length2":17}]],"length":3722,"saved":false}
{"ts":1354684364394,"patch":[[{"diffs":[[0,"afe:"],[-1,"fals"],[1,"tru"],[0,"e}) "]],"start1":334,"start2":334,"length1":12,"length2":11}]],"length":3721,"saved":false}
{"ts":1354684406205,"patch":[[{"diffs":[[0,"ort,"],[-1,"{safe:true}) "],[1," {auto_reconnect: true}, {})"],[0,");\n\t"]],"start1":328,"start2":328,"length1":21,"length2":36}]],"length":3736,"saved":false}
{"ts":1354688838744,"patch":[[{"diffs":[[0,"';\n\n"],[-1,"// use moment.js for pretty date-stamping //\n"],[0,"var "]],"start1":186,"start2":186,"length1":53,"length2":8}]],"length":3691,"saved":false}
{"ts":1354688851818,"patch":[[{"diffs":[[0,"og('"],[-1,"connected to database"],[1,"polaczenie z baza"],[0," :: "]],"start1":398,"start2":398,"length1":29,"length2":25}]],"length":3687,"saved":false}
{"ts":1354688869830,"patch":[[{"diffs":[[0,"\n// "],[1,"za"],[0,"log"],[-1,"ging in"],[1,"owniae auto i manual"],[0," //\n"]],"start1":512,"start2":512,"length1":18,"length2":33}]],"length":3702,"saved":false}
{"ts":1354688894770,"patch":[[{"diffs":[[0,"\n\n//"],[1," zapis"],[0," re"],[-1,"cord insertion, update & deletion methods"],[1,"kordu, aktualizacja i usuwanie "],[0," //\n"]],"start1":1067,"start2":1067,"length1":52,"length2":48}]],"length":3698,"saved":false}
{"ts":1354688921704,"patch":[[{"diffs":[[0,"sh;\n"],[-1,"\t\t\t\t\t// append date stamp when record was created //\n"],[0,"\t\t\t\t"]],"start1":1458,"start2":1458,"length1":61,"length2":8},{"diffs":[[0,"\n// "],[-1,"auxiliary methods"],[1,"pomocnicze"],[0," //\n"]],"start1":2649,"start2":2649,"length1":25,"length2":18}]],"length":3638,"saved":false}
{"ts":1354688924305,"patch":[[{"diffs":[[0,"ocnicze "],[1,"metody "],[0,"//\n\nAM.g"]],"start1":2656,"start2":2656,"length1":16,"length2":23}]],"length":3645,"saved":false}
{"ts":1354688950123,"patch":[[{"diffs":[[0,"e();"],[-1," // reset accounts collection for testing //"],[0,"\n}\n\n"]],"start1":3105,"start2":3105,"length1":52,"length2":8}]],"length":3601,"saved":false}
{"ts":1354688968022,"patch":[[{"diffs":[[0,"\n// "],[-1,"just for testing -"],[1,"funkcje"],[0," t"],[-1,"h"],[0,"es"],[-1,"e are not actually being used"],[1,"towe"],[0," //\n"]],"start1":3112,"start2":3112,"length1":60,"length2":23}]],"length":3564,"saved":false}
{"ts":1354688982260,"patch":[[{"diffs":[[0,")\n{\n"],[-1,"// this takes an array of name/val pairs to search against {fieldName : 'value'} //\n"],[0,"\tAM."]],"start1":3350,"start2":3350,"length1":92,"length2":8}]],"length":3480,"saved":false}
{"contributors":[],"silentsave":false,"ts":1354691286760,"patch":[[{"diffs":[[0,"ue}, {})"],[1,",{safe:false}"],[0,");\n\tAM.d"]],"start1":307,"start2":307,"length1":16,"length2":29}]],"length":3493,"saved":false}
{"ts":1354691341087,"patch":[[{"diffs":[[0,"afe:"],[-1,"fals"],[1,"tru"],[0,"e});"]],"start1":318,"start2":318,"length1":12,"length2":11}]],"length":3492,"saved":false}
{"contributors":[],"silentsave":false,"ts":1354691641084,"patch":[[{"diffs":[[0,"dbHost, "],[-1,"dbPort"],[1,"27017"],[0,", {auto_"]],"start1":272,"start2":272,"length1":22,"length2":21}]],"length":3491,"saved":false}
{"ts":1354691660275,"patch":[[{"diffs":[[0,"dbHost, "],[-1,"27017"],[1,"dbPort"],[0,", {auto_"]],"start1":272,"start2":272,"length1":21,"length2":22}]],"length":3492,"saved":false}
{"ts":1354691734797,"patch":[[{"diffs":[[0,"rue}"],[-1,", {}"],[0,"),{s"]],"start1":306,"start2":306,"length1":12,"length2":8}]],"length":3488,"saved":false}
{"ts":1354692188964,"patch":[[{"diffs":[[0,"}),{"],[-1,"safe:true"],[1,"w:1"],[0,"});\n"]],"start1":309,"start2":309,"length1":17,"length2":11}]],"length":3482,"saved":false}
{"ts":1354692208018,"patch":[[{"diffs":[[0," Server("],[-1,"dbHost"],[1,"127.0.0.1"],[0,", dbPort"]],"start1":264,"start2":264,"length1":22,"length2":25}]],"length":3485,"saved":false}
{"ts":1354692216169,"patch":[[{"diffs":[[0," Server("],[1,"\""],[0,"127.0.0."]],"start1":264,"start2":264,"length1":16,"length2":17},{"diffs":[[0,"27.0.0.1"],[1,"\""],[0,", dbPort"]],"start1":274,"start2":274,"length1":16,"length2":17}]],"length":3487,"saved":false}
{"ts":1354692246887,"patch":[[{"diffs":[[0,"ver("],[-1,"\"127.0.0.1\""],[1,"dbHost"],[0,", db"]],"start1":268,"start2":268,"length1":19,"length2":14}]],"length":3482,"saved":false}
